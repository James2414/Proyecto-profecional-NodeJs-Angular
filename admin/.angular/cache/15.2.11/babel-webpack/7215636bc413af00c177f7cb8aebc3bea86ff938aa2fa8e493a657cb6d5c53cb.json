{"ast":null,"code":"import { GLOBAL } from './GLOBAL';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClienteService {\n  constructor(_http) {\n    this._http = _http;\n    this.url = GLOBAL.url;\n  }\n  listar_clientes_filtro_admin(tipo, filtro, token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this._http.get(`${this.url}listar_clientes_filtro_admin/${tipo}/${filtro}`, {\n      headers\n    });\n  }\n  registro_cliente_admin(data, token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this._http.post(`${this.url}registro_cliente_admin`, data, {\n      headers\n    });\n  }\n  obtener_cliente_admin(id, token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this._http.get(`${this.url}obtener_cliente_admin/${id}`, {\n      headers: headers\n    });\n  }\n  actualizar_cliente_admin(id, data, token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this._http.put(`${this.url}actualizar_cliente_admin/${id}`, data, {\n      headers\n    });\n  }\n  eliminar_cliente_admin(id, token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this._http.delete(`${this.url}eliminar_cliente_admin/${id}`, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function ClienteService_Factory(t) {\n    return new (t || ClienteService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClienteService,\n    factory: ClienteService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["GLOBAL","HttpHeaders","ClienteService","constructor","_http","url","listar_clientes_filtro_admin","tipo","filtro","token","headers","get","registro_cliente_admin","data","post","obtener_cliente_admin","id","actualizar_cliente_admin","put","eliminar_cliente_admin","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\james\\Desktop\\onlineStoreee-tienda-angular-Node-js\\onlineStoreee\\admin\\src\\app\\services\\cliente.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { GLOBAL } from './GLOBAL';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClienteService {\n\n  public url: string;\n\n  constructor(private _http: HttpClient) {\n    this.url = GLOBAL.url;\n  }\n\n  listar_clientes_filtro_admin(tipo: any, filtro: any, token: any): Observable<any> {\n    let headers = new HttpHeaders({'Content-Type':'application/json', 'Authorization': token});\n    return this._http.get(`${this.url}listar_clientes_filtro_admin/${tipo}/${filtro}`, { headers });\n  }\n\n  registro_cliente_admin(data: any, token: any): Observable<any> {\n    let headers = new HttpHeaders({'Content-Type':'application/json', 'Authorization': token});\n    return this._http.post(`${this.url}registro_cliente_admin`, data, { headers });\n  }\n\n  obtener_cliente_admin(id: string, token: any): Observable<any> {\n    let headers = new HttpHeaders({'Content-Type': 'application/json', 'Authorization': token});\n    return this._http.get(`${this.url}obtener_cliente_admin/${id}`, { headers: headers });\n  }\n\n  actualizar_cliente_admin(id: string, data: any, token: string): Observable<any> {\n    let headers = new HttpHeaders({'Content-Type': 'application/json','Authorization': token});\n       return this._http.put(`${this.url}actualizar_cliente_admin/${id}`, data, { headers });\n  }\n\n  eliminar_cliente_admin(id: string, token: string): Observable<any> {\n    let headers = new HttpHeaders({'Content-Type': 'application/json','Authorization': token});\n       return this._http.delete(`${this.url}eliminar_cliente_admin/${id}`, { headers });\n  }\n  \n}\n"],"mappings":"AAEA,SAASA,MAAM,QAAQ,UAAU;AACjC,SAAqBC,WAAW,QAAQ,sBAAsB;;;AAK9D,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IACvB,IAAI,CAACC,GAAG,GAAGL,MAAM,CAACK,GAAG;EACvB;EAEAC,4BAA4BA,CAACC,IAAS,EAAEC,MAAW,EAAEC,KAAU;IAC7D,IAAIC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAAC,cAAc,EAAC,kBAAkB;MAAE,eAAe,EAAEQ;IAAK,CAAC,CAAC;IAC1F,OAAO,IAAI,CAACL,KAAK,CAACO,GAAG,CAAC,GAAG,IAAI,CAACN,GAAG,gCAAgCE,IAAI,IAAIC,MAAM,EAAE,EAAE;MAAEE;IAAO,CAAE,CAAC;EACjG;EAEAE,sBAAsBA,CAACC,IAAS,EAAEJ,KAAU;IAC1C,IAAIC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAAC,cAAc,EAAC,kBAAkB;MAAE,eAAe,EAAEQ;IAAK,CAAC,CAAC;IAC1F,OAAO,IAAI,CAACL,KAAK,CAACU,IAAI,CAAC,GAAG,IAAI,CAACT,GAAG,wBAAwB,EAAEQ,IAAI,EAAE;MAAEH;IAAO,CAAE,CAAC;EAChF;EAEAK,qBAAqBA,CAACC,EAAU,EAAEP,KAAU;IAC1C,IAAIC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAAC,cAAc,EAAE,kBAAkB;MAAE,eAAe,EAAEQ;IAAK,CAAC,CAAC;IAC3F,OAAO,IAAI,CAACL,KAAK,CAACO,GAAG,CAAC,GAAG,IAAI,CAACN,GAAG,yBAAyBW,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAEA;IAAO,CAAE,CAAC;EACvF;EAEAO,wBAAwBA,CAACD,EAAU,EAAEH,IAAS,EAAEJ,KAAa;IAC3D,IAAIC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAAC,cAAc,EAAE,kBAAkB;MAAC,eAAe,EAAEQ;IAAK,CAAC,CAAC;IACvF,OAAO,IAAI,CAACL,KAAK,CAACc,GAAG,CAAC,GAAG,IAAI,CAACb,GAAG,4BAA4BW,EAAE,EAAE,EAAEH,IAAI,EAAE;MAAEH;IAAO,CAAE,CAAC;EAC1F;EAEAS,sBAAsBA,CAACH,EAAU,EAAEP,KAAa;IAC9C,IAAIC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAAC,cAAc,EAAE,kBAAkB;MAAC,eAAe,EAAEQ;IAAK,CAAC,CAAC;IACvF,OAAO,IAAI,CAACL,KAAK,CAACgB,MAAM,CAAC,GAAG,IAAI,CAACf,GAAG,0BAA0BW,EAAE,EAAE,EAAE;MAAEN;IAAO,CAAE,CAAC;EACrF;EAAC,QAAAW,CAAA,G;qBA/BUnB,cAAc,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdxB,cAAc;IAAAyB,OAAA,EAAdzB,cAAc,CAAA0B,IAAA;IAAAC,UAAA,EAFb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}